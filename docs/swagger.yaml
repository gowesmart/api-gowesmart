definitions:
  request.LoginRequest:
    properties:
      email:
        type: string
        x-order: "0"
      password:
        example: password
        type: string
        x-order: "1"
    required:
    - email
    - password
    type: object
  request.RegisterRequest:
    properties:
      email:
        type: string
        x-order: "1"
      password:
        example: password
        minLength: 8
        type: string
        x-order: "2"
      username:
        maxLength: 20
        minLength: 3
        type: string
        x-order: "0"
    required:
    - email
    - password
    - username
    type: object
  response.LoginResponse:
    properties:
      email:
        example: luigi@sam.com
        type: string
        x-order: "1"
      role:
        example: USER
        type: string
        x-order: "2"
      token:
        example: token
        type: string
        x-order: "3"
      username:
        example: luigi
        type: string
        x-order: "0"
    type: object
  response.RegisterResponse:
    properties:
      email:
        example: luigi@sam.com
        type: string
        x-order: "1"
      role:
        example: USER
        type: string
        x-order: "2"
      username:
        example: luigi
        type: string
        x-order: "0"
    type: object
  web.Metadata:
    properties:
      limit:
        type: integer
        x-order: "1"
      page:
        type: integer
        x-order: "0"
      total_data:
        type: integer
        x-order: "3"
      total_pages:
        type: integer
        x-order: "2"
    type: object
  web.WebBadRequestError:
    properties:
      code:
        example: 400
        type: integer
      errors:
        example: Bad Request
        type: string
    type: object
  web.WebInternalServerError:
    properties:
      code:
        example: 500
        type: integer
      errors:
        example: Internal Server Error
        type: string
    type: object
  web.WebSuccess-response_LoginResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.LoginResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_RegisterResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.RegisterResponse'
        x-order: "2"
    type: object
  web.WebUnauthorizedError:
    properties:
      code:
        example: 401
        type: integer
      errors:
        example: Unauthorized
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      description: Logging in to get jwt token to access admin or user api by roles.
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.WebUnauthorizedError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: User login.
      tags:
      - Auth
  /api/auth/register:
    post:
      description: Registering a user from public access.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: User register.
      tags:
      - Auth
swagger: "2.0"
