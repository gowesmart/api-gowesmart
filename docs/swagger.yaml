definitions:
  request.CartItemCreateRequest:
    properties:
      bike_id:
        type: integer
      quantity:
        type: integer
    required:
    - bike_id
    - quantity
    type: object
  request.CartItemDeleteRequest:
    properties:
      bike_id:
        type: integer
    required:
    - bike_id
    type: object
  request.CartItemUpdateRequest:
    properties:
      bike_id:
        type: integer
      quantity:
        type: integer
    required:
    - bike_id
    - quantity
    type: object
  request.CreateBikeRequest:
    properties:
      brand:
        type: string
      category_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      is_available:
        type: boolean
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      year:
        type: integer
    required:
    - brand
    - category_id
    - image_url
    - name
    - price
    - stock
    - year
    type: object
  request.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  request.CreateReviewRequest:
    properties:
      bike_id:
        type: integer
      comment:
        type: string
      order_id:
        type: integer
      rating:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - bike_id
    - comment
    - order_id
    - rating
    type: object
  request.ForgotPasswordRequest:
    properties:
      email:
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
        x-order: "0"
    required:
    - email
    - username
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
        x-order: "0"
      password:
        example: password
        type: string
        x-order: "1"
    required:
    - email
    - password
    type: object
  request.ProfileUpdateRequest:
    properties:
      age:
        minimum: 0
        type: integer
      bio:
        maxLength: 700
        type: string
        x-order: "3"
      email:
        type: string
        x-order: "1"
      gender:
        enum:
        - MALE
        - FEMALE
        type: string
        x-order: "5"
      name:
        maxLength: 150
        minLength: 3
        type: string
        x-order: "2"
      username:
        maxLength: 20
        minLength: 3
        type: string
        x-order: "0"
    type: object
  request.RegisterRequest:
    properties:
      email:
        type: string
        x-order: "1"
      password:
        example: password
        minLength: 8
        type: string
        x-order: "2"
      username:
        maxLength: 20
        minLength: 3
        type: string
        x-order: "0"
    required:
    - email
    - password
    - username
    type: object
  request.ResetPasswordRequest:
    properties:
      new_password:
        example: new_password
        minLength: 8
        type: string
        x-order: "0"
    required:
    - new_password
    type: object
  request.TransactionCreate:
    properties:
      bike_id:
        type: integer
      quantity:
        type: integer
      total_price:
        type: integer
    type: object
  request.TransactionUpdate:
    properties:
      bike_id:
        type: integer
      id:
        type: integer
      quantity:
        type: integer
      total_price:
        type: integer
    type: object
  request.UpdateBikeRequest:
    properties:
      brand:
        type: string
      category_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      is_available:
        type: boolean
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      year:
        type: integer
    type: object
  request.UpdateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  request.UpdateReviewRequest:
    properties:
      comment:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - comment
    - rating
    type: object
  request.UpdateRoleRequest:
    properties:
      role:
        maximum: 2
        minimum: 1
        type: integer
      user_id:
        type: integer
    required:
    - role
    - user_id
    type: object
  response.BikeResponse:
    properties:
      brand:
        type: string
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_available:
        type: boolean
      name:
        type: string
      price:
        type: integer
      rating:
        type: integer
      reviewers:
        type: integer
      stock:
        type: integer
      updated_at:
        type: string
      year:
        type: integer
    type: object
  response.CartItemResponse:
    properties:
      bike_id:
        type: integer
      cart_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  response.CartResponse:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/response.CartItemResponse'
        type: array
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  response.CreateTransactionResponse:
    properties:
      transaction_id:
        type: integer
    type: object
  response.ForgotPasswordResponse:
    properties:
      forgot_password_token:
        example: token
        type: string
    type: object
  response.GetUserCartItemBikeResponse:
    properties:
      brand:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
    type: object
  response.GetUserCartItemResponse:
    properties:
      bike:
        $ref: '#/definitions/response.GetUserCartItemBikeResponse'
      cart_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  response.GetUserCartResponse:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/response.GetUserCartItemResponse'
        type: array
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.GetUserCurrentResponse:
    properties:
      email:
        example: luigi@sam.com
        type: string
        x-order: "3"
      id:
        example: 1
        type: integer
        x-order: "0"
      role:
        example: USER
        type: string
        x-order: "4"
      username:
        example: luigi
        type: string
        x-order: "2"
    type: object
  response.LoginResponse:
    properties:
      email:
        example: luigi@sam.com
        type: string
        x-order: "1"
      role:
        example: USER
        type: string
        x-order: "2"
      token:
        example: token
        type: string
        x-order: "3"
      username:
        example: luigi
        type: string
        x-order: "0"
    type: object
  response.OrderResponse:
    properties:
      bikeID:
        type: integer
      id:
        type: integer
      quantity:
        type: integer
      totalPrice:
        type: integer
    type: object
  response.ProfileResponse:
    properties:
      age:
        example: 18
        type: integer
        x-order: "5"
      bio:
        example: I am Luigi
        type: string
        x-order: "4"
      email:
        example: luigi@sam.com
        type: string
        x-order: "2"
      gender:
        example: MALE
        type: string
        x-order: "6"
      id:
        example: 1
        type: integer
        x-order: "0"
      name:
        example: Luigi Di Caprio
        type: string
        x-order: "3"
      username:
        example: luigi
        type: string
        x-order: "1"
    type: object
  response.RegisterResponse:
    properties:
      email:
        example: luigi@sam.com
        type: string
        x-order: "1"
      role:
        example: USER
        type: string
        x-order: "2"
      username:
        example: luigi
        type: string
        x-order: "0"
    type: object
  response.ReviewResponse:
    properties:
      bike_id:
        type: integer
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.RoleResponse:
    properties:
      id:
        type: integer
      role:
        type: integer
      user_id:
        type: integer
    type: object
  response.TransactionResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      orders:
        items:
          $ref: '#/definitions/response.OrderResponse'
        type: array
      payment_link:
        type: string
      status:
        type: string
      total_price:
        type: integer
      upodated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.UserResponse:
    properties:
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  response.UserTransactionResponse:
    properties:
      id:
        type: integer
      transaction:
        items:
          $ref: '#/definitions/response.TransactionResponse'
        type: array
      username:
        type: string
    type: object
  web.Metadata:
    properties:
      limit:
        type: integer
        x-order: "1"
      page:
        type: integer
        x-order: "0"
      total_data:
        type: integer
        x-order: "3"
      total_pages:
        type: integer
        x-order: "2"
    type: object
  web.WebBadRequestError:
    properties:
      code:
        example: 400
        type: integer
      errors:
        example: Bad Request
        type: string
    type: object
  web.WebInternalServerError:
    properties:
      code:
        example: 500
        type: integer
      errors:
        example: Internal Server Error
        type: string
    type: object
  web.WebNotFoundError:
    properties:
      code:
        example: 404
        type: integer
      errors:
        example: Not Found
        type: string
    type: object
  web.WebSuccess-array_response_BikeResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        items:
          $ref: '#/definitions/response.BikeResponse'
        type: array
        x-order: "2"
    type: object
  web.WebSuccess-array_response_CategoryResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        items:
          $ref: '#/definitions/response.CategoryResponse'
        type: array
        x-order: "2"
    type: object
  web.WebSuccess-array_response_ReviewResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        items:
          $ref: '#/definitions/response.ReviewResponse'
        type: array
        x-order: "2"
    type: object
  web.WebSuccess-array_response_TransactionResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        items:
          $ref: '#/definitions/response.TransactionResponse'
        type: array
        x-order: "2"
    type: object
  web.WebSuccess-array_response_UserResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        items:
          $ref: '#/definitions/response.UserResponse'
        type: array
        x-order: "2"
    type: object
  web.WebSuccess-response_BikeResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.BikeResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_CartResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.CartResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_CategoryResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.CategoryResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_CreateTransactionResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.CreateTransactionResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_ForgotPasswordResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.ForgotPasswordResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_GetUserCartResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.GetUserCartResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_GetUserCurrentResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.GetUserCurrentResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_LoginResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.LoginResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_ProfileResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.ProfileResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_RegisterResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.RegisterResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_ReviewResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.ReviewResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_RoleResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.RoleResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_TransactionResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.TransactionResponse'
        x-order: "2"
    type: object
  web.WebSuccess-response_UserTransactionResponse:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        allOf:
        - $ref: '#/definitions/response.UserTransactionResponse'
        x-order: "2"
    type: object
  web.WebSuccess-string:
    properties:
      code:
        example: 200
        type: integer
        x-order: "0"
      message:
        example: success
        type: string
        x-order: "1"
      metadata:
        allOf:
        - $ref: '#/definitions/web.Metadata'
        x-order: "3"
      payload:
        type: string
        x-order: "2"
    type: object
  web.WebUnauthorizedError:
    properties:
      code:
        example: 401
        type: integer
      errors:
        example: Unauthorized
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/forgot-password:
    post:
      description: Request forgot password.
      parameters:
      - description: the body to request forgot password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ForgotPasswordResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Forgot password.
      tags:
      - Auth
  /api/auth/login:
    post:
      description: Logging in to get jwt token to access admin or user api by roles.
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.WebUnauthorizedError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: User login.
      tags:
      - Auth
  /api/auth/register:
    post:
      description: Registering a user from public access.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: User register.
      tags:
      - Auth
  /api/auth/reset-password:
    post:
      description: Reset password.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to reset password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Reset password.
      tags:
      - Auth
  /api/bikes:
    get:
      description: Get all bikes
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - description: Name
        in: query
        name: name
        type: string
      - description: Brand ID
        in: query
        name: category_id
        type: integer
      - description: Minimum Price
        in: query
        name: min_price
        type: integer
      - description: Maximum Price
        in: query
        name: max_price
        type: integer
      - description: Minimum Year
        in: query
        name: min_year
        type: integer
      - description: Maximum Year
        in: query
        name: max_year
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-array_response_BikeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Get all bikes
      tags:
      - Bikes
    post:
      consumes:
      - application/json
      description: Create a new bike
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bike body
        in: body
        name: bike
        required: true
        schema:
          $ref: '#/definitions/request.CreateBikeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_BikeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Create a bike
      tags:
      - Bikes
  /api/bikes/{id}:
    delete:
      description: Delete a bike by ID
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bike ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_BikeResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Delete a bike
      tags:
      - Bikes
    get:
      description: Get a bike by ID
      parameters:
      - description: Bike ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_BikeResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Get a bike by ID
      tags:
      - Bikes
    patch:
      consumes:
      - application/json
      description: Update an existing bike
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bike ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bike body
        in: body
        name: bike
        required: true
        schema:
          $ref: '#/definitions/request.UpdateBikeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_BikeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Update a bike
      tags:
      - Bikes
  /api/bikes/{id}/reviews:
    get:
      description: Get reviews by bike id
      parameters:
      - description: Bike ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-array_response_ReviewResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Get reviews by bike id
      tags:
      - Bikes
  /api/carts:
    delete:
      consumes:
      - application/json
      description: Delete a cart
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Cart Update
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/request.CartItemDeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Delete a cart
      tags:
      - Carts
    patch:
      consumes:
      - application/json
      description: Update a cart
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Cart Item Update
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/request.CartItemUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Update a cart
      tags:
      - Carts
    post:
      consumes:
      - application/json
      description: Create a new cart item
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Cart Item Create
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/request.CartItemCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Create a new cart item
      tags:
      - Carts
  /api/categories:
    get:
      description: Get all categories
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-array_response_CategoryResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category body
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/request.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Create a category
      tags:
      - Categories
  /api/categories/{id}:
    delete:
      description: Delete a category by ID
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Delete a category
      tags:
      - Categories
    get:
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Get a category by ID
      tags:
      - Categories
    patch:
      consumes:
      - application/json
      description: Update an existing category
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category body
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Update a category
      tags:
      - Categories
  /api/reviews:
    get:
      description: Get all reviews
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-array_response_ReviewResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Get all reviews
      tags:
      - Reviews
    post:
      consumes:
      - application/json
      description: Create a new review
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Review body
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/request.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Create a review
      tags:
      - Reviews
  /api/reviews/{id}:
    delete:
      description: Delete a review by ID
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ReviewResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Delete a review
      tags:
      - Reviews
    get:
      description: Get a review by ID
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ReviewResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Get a review by ID
      tags:
      - Reviews
    patch:
      consumes:
      - application/json
      description: Update an existing review
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      - description: Review body
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/request.UpdateReviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Update a review
      tags:
      - Reviews
  /api/reviews/order/{orderId}:
    get:
      description: Get a review by ID
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ReviewResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Get a review by ID
      tags:
      - Reviews
  /api/transactions:
    get:
      description: Registering a user from public access.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-array_response_TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Get all transaction.
      tags:
      - Transactions
    post:
      consumes:
      - application/json
      description: Create a new transaction
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction payload
        in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/request.TransactionCreate'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CreateTransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Create a new transaction
      tags:
      - Transactions
  /api/transactions/{id}:
    delete:
      description: Delete a transaction
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Delete a transaction
      tags:
      - Transactions
    get:
      description: Get transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Get transaction by ID
      tags:
      - Transactions
    patch:
      consumes:
      - application/json
      description: Update a transaction
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction update payload
        in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/request.TransactionUpdate'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Update a transaction
      tags:
      - Transactions
  /api/transactions/payment/{id}:
    patch:
      description: Pay for a transaction
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Pay for a transaction
      tags:
      - Transactions
  /api/users:
    get:
      description: Get all users
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-array_response_UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Get all users
      tags:
      - Users
  /api/users/current:
    get:
      description: Get current user.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_GetUserCurrentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Get current user.
      tags:
      - Users
  /api/users/current/carts:
    get:
      description: Find a user carts by username.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_GetUserCartResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Find user carts.
      tags:
      - Users
  /api/users/current/transactions:
    get:
      description: Find a user transactions by username.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_UserTransactionResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Find user transactions.
      tags:
      - Users
  /api/users/profile:
    patch:
      description: Update user profile.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to reset password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.ProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.WebUnauthorizedError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Update user profile.
      tags:
      - Users
  /api/users/profile/{username}:
    get:
      description: Find a user profile by username.
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_ProfileResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      summary: Find user profile.
      tags:
      - Users
  /roles/update:
    patch:
      consumes:
      - application/json
      description: Update the role for a user based on user ID and role ID. Role 1
        is for admin and role 2 is for user.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update Role Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_RoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebInternalServerError'
      security:
      - BearerToken: []
      summary: Update role for a specific user by ID
      tags:
      - Roles
swagger: "2.0"
